# -*- coding: utf-8 -*-
##
"""LAB3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c0fYU_lPq4xQohtd-xGKHcl2sVaEJh8E

# LABORATORIO 3
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()  # for plot styling

seed = 161

# Composicion de pipelines
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# Regresion lineal
from sklearn.linear_model import LinearRegression

# Importar/ Exportar modelos
from joblib import dump, load

# Metricas
from sklearn.metrics import mean_squared_error as mse

# q-q plots
import scipy.stats as stats

"""Leemos el archivo"""

df=pd.read_csv('202210_Laboratorio3_data_DatosTrain.csv', sep=',', encoding = 'utf-8')

"""**Limpieza**"""

df.drop("Unnamed: 0",axis=1)

"""# **Modelado**

"""

# Eliminamos los registros que tienen la variable objetivo nula
df = df.dropna(subset = ['Life expectancy'])

# Preprocesamiento
# Se usa un transformador para seleccionar unicamente las columnas que se quieren usar
selected_cols = ['HIV/AIDS','BMI','Income composition of resources','Adult Mortality']

pre = [('initial',ColumnTransformer([("selector", 'passthrough',selected_cols)])),]

# Modelo
model = [('model', LinearRegression())]

# Decalra el pipeline
pipeline = Pipeline(pre+model)

# Extraemos las variables explicativas y objetivo para entrenar
X = df.drop('Life expectancy', axis = 1)
y = df['Life expectancy']

pipeline = pipeline.fit(X,y)

# Visualizamos la regresion lineal en cada dimension
f, axs = plt.subplots(1, len(selected_cols), sharey=True, figsize = (12,4))

for i in range(len(selected_cols)):

    pos_col = i
    col = selected_cols[pos_col]

    # Variable x
    x = X[col]
    # Pendiente
    m = pipeline['model'].coef_[pos_col]
    # Interceto
    b = pipeline['model'].intercept_

    axs[i].plot(x, y, 'o', alpha = 0.1)
    axs[i].plot(x, x*m + b)
    axs[i].set_title(col)

"""# Exportación del modelo

"""

# Usamos la lbreria joblib
filename = 'pipeline.joblib'
# Se guarda (Exportación del modelo)
dump(pipeline, filename)

# Se lee
p2 = load(filename)

"""# Coeficientes"""

pipeline['model'].coef_

# En DataFrame
pd.DataFrame({'columns':selected_cols, 'coef':pipeline['model'].coef_})

"""# Métricas"""

print(p2.score(X,y))

y_true = y
y_predicted = p2.predict(X)
print(y_predicted)

# Note que hay que sacarle la raiz al valor
print(np.sqrt(mse(y_true, y_predicted)))